import Head from "next/head";
import styles from "./index.module.css";

import Hero from "../sections/Hero";
import Nav from "../sections/Nav";
import Footer from "../sections/Footer";
import CTA from "../sections/CTA";
import DynamicComponent from "../sections/DynamicComponent";

import { groq } from "next-sanity";
import client from "../../lib/config";

export default function Home({ data }) {
  const { hero, content, cta } = data;

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header>
        <Nav />
        <Hero
          heading={hero.heading}
          paragraph={hero.paragraph}
          buttonText={hero.buttonText}
          buttonUrl={hero.buttonUrl}
          buttonDescription={hero.buttonDescription}
          caravansList={hero.featuredProducts}
        />
      </header>

      <main className={styles.main}>
        {content.map((item) => DynamicComponent(item))}
      </main>
      <CTA left={cta.left} right={cta.right} />
      <footer>
        <Footer />
      </footer>
    </div>
  );
}

export async function getStaticProps() {
  const heroQuery = groq`*[_type == "landingPage" && name == 'main'][0].hero{
    ...,
    featuredProducts[]->{
      name, price,
      image{
        imageAlt,
        asset->
      }
    }
  }`;
  const hero = await client.fetch(heroQuery);

  const contentQuery = groq`*[_type == "landingPage" && name == 'main'][0].contentBuilder[]{
    _type == 'contentCards' => {
      _type, _key, heading,
      cards[]->{
        ...,
        image{
          imageAlt,
          asset->
        }
      }
    },
    _type == 'contentImage' => {
      _type, _key, image{imageAlt,asset->}
    },
    _type == 'contentText' => {
      _type, _key, heading, column1text, column2text
    }
  }`;

  const content = await client.fetch(contentQuery);

  const ctaQuery = groq`*[_type== "landingPage" && name == 'main'][0]{
    "left": leftCTA{
      ...,
      columnImage{
        imageAlt,
        asset->
      }
    },
    "right": rightCTA{
      ...,
      columnImage{
        imageAlt,
        asset->
      }
    }
  }`;
  const cta = await client.fetch(ctaQuery);

  return {
    props: {
      data: { hero, content, cta },
    },
  };
}
